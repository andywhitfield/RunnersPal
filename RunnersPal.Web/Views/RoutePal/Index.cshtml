@{
    ViewBag.Title = "Route:Pal";
    ViewBag.SelectedTab = "RoutePal";
    ViewBag.Scripts = new[] { "~/Scripts/latlon.js", "~/Scripts/geo.js", "~/Scripts/runnerspal-routemapping.js", "~/Scripts/runnerspal-maproute.js", "http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=7.0" };
}
<script type="text/javascript">
    $(function () {
        $("#routeManagementOptions").accordion({ fillSpace: true, active: 2 });
        $("#routeManagement").resizable({ minHeight: 250, handles: "s", resize: function () { $("#routeManagementOptions").accordion("resize"); }, alsoResize: "#mapDiv" });

        var loginPromptDialog = $("#loginPromptDialog").dialog({ height: 280, width: 400, modal: true, buttons: { OK: function () { $(this).dialog("close"); } }, autoOpen: false });

        var routeModel = new RouteDisplayModel();
        routeModel.createMap('#mapDiv');

        $('#routeNew')
            .button({ icons: { primary: "ui-icon-newwin" }, text: false })
            .click(function () {
                if (routeModel.allowSave() || routeModel.routePointCount() > 0) {
                    if (!window.confirm('This will clear the current route - are you sure you want to continue?')) return;
                }
                routeModel.reset();
            });

        $('#routeReset')
            .button({ icons: { primary: "ui-icon-refresh" }, text: false })
            .click(function () {
                if (routeModel.allowSave()) {
                    if (!window.confirm('This will undo all the changes you\'ve made to the current route - are you sure you want to continue?')) return;
                }
                var curRoute = routeModel.currentRoute();
                if (curRoute != null) curRoute.reload(function (result) { routeModel.reset(result); });
                else new MyRouteModel(routeModel, routeModel.routeId(), '', 0, '', '', '').loadRoute();
            });

        $('#routeUndo')
            .button({ icons: { primary: "ui-icon-arrowreturnthick-1-w" }, text: false })
            .click(function () {
                routeModel.undoLastPoint();
            });

        $('#routeSave')
            .button({ icons: { primary: "ui-icon-circle-check" }, text: false })
            .click(function () {
                // if a public route, prompt that a copy will be created
                if (routeModel.routePublicOther()) {
                    if (!window.confirm('This is a public route created by someone else. Saving the route will create a copy under your account - do you want to continue?')) return;
                }

                if (!loginAccountModel.isLoggedIn) {
                    loginPromptDialog.dialog('open');
                    loginPromptDialog.bind('dialogclose', function () {
                        $.post('@Url.Action("beforelogin", "routepal")', { id: routeModel.routeId(), name: routeModel.routeName(), notes: routeModel.routeNotes(), public: routeModel.routePublic(), points: routeModel.pointsToJson(), distance: routeModel.distance() },
                            function (result) {
                                if (!result.Completed) {
                                    alert('There was a problem saving the changes to your route.\n\nMore details:\n' + result.Reason);
                                    return;
                                }
                                loginAccountModel.showLoginDialog();
                                loginAccountModel.returnPage = '@(Url.Action("index", "routepal"))?route=0';
                                loginPromptDialog.unbind('dialogclose');
                            });
                    });
                } else {
                    $.post('@Url.Action("save", "routepal")', { id: routeModel.routeId(), name: routeModel.routeName(), notes: routeModel.routeNotes(), public: routeModel.routePublic(), points: routeModel.pointsToJson(), distance: routeModel.distance() },
                        function (result) {
                            if (!result.Completed) {
                                alert('There was a problem saving the changes to your route.\n\nMore details:\n' + result.Reason);
                                return;
                            }
                            var priorRouteId = routeModel.routeId();
                            var priorPublicOther = routeModel.routePublicOther();
                            var isSavedRoute = priorRouteId > 0;
                            routeModel.reset(result.Route);
                            if (isSavedRoute && !priorPublicOther) {
                                if (priorRouteId != routeModel.routeId()) {
                                    for (var i = 0; i < routeModel.myRoutes().length; i++)
                                        if (routeModel.myRoutes()[i].routeId() == priorRouteId)
                                            routeModel.myRoutes()[i].routeId(routeModel.routeId());
                                }
                                routeModel.refreshMyRoute(result.Route);
                            } else {
                                routeModel.myRoutes.push(new MyRouteModel(routeModel, result.Route.Id, result.Route.Name, result.Route.Distance.toFixed(2), result.Route.LastRun, result.Route.Notes, ''));
                            }
                        }
                    );
                }
            });

        $('#routeDelete')
            .button({ icons: { primary: "ui-icon-closethick" }, text: false })
            .click(function () {
                if (!window.confirm('This will delete the route - are you sure you want to continue?')) return;

                $.post('@Url.Action("delete", "routepal")', { id: routeModel.routeId() },
                    function (result) {
                        if (!result.Completed) {
                            alert('There was a problem deleting this route.\n\nMore details:\n' + result.Reason);
                            return;
                        }
                        for (var i = 0; i < routeModel.myRoutes().length; i++)
                            if (routeModel.myRoutes()[i].routeId() == routeModel.routeId())
                                routeModel.myRoutes.remove(routeModel.myRoutes()[i]);
                        routeModel.reset();
                    }
                );
            });

        $('#findARoute').submit(function () {
            var query = $('#q').val();
            $.post('@Url.Action("find", "routepal")', { q: query },
                function (result) {
                    if (!result.Completed) {
                        routeModel.foundRouteText('Could not search for routes: ' + result.Reason);
                        return;
                    }
                    routeModel.foundRoutes.removeAll();
                    for (var i = 0; i < result.Routes.length; i++)
                        routeModel.foundRoutes.push(new MyRouteModel(routeModel, result.Routes[i].Id, result.Routes[i].Name, result.Routes[i].Distance, result.Routes[i].LastRun, result.Routes[i].Notes, result.Routes[i].LastRunBy));
                    if (routeModel.foundRoutes().length == 0)
                        routeModel.foundRouteText('No routes found matching your search string. Try modifying your search and try again.');
                }
            );
            return false;
        });

        ko.bindingHandlers.buttonEnabled = {
            update: function (element, valueAccessor, allBindingsAccessor, viewModel) {
                $(element).button(ko.utils.unwrapObservable(valueAccessor()) ? 'enable' : 'disable');
            }
        };
        ko.applyBindings(routeModel);
        loadMyRoutes(routeModel, function () {
            var routeId = parseInt(getParameterByName('route'));
            if (!isNaN(routeId)) {
                for (var i = 0; i < routeModel.myRoutes().length; i++)
                    if (routeModel.myRoutes()[i].routeId() == routeId) {
                        routeModel.myRoutes()[i].loadRoute();
                        return;
                    }
                // not one of my routes, perhaps it's a public route, so load it up:
                new MyRouteModel(routeModel, routeId, '', 0, '', '', '').loadRoute();

                if (routeId == 0 && loginAccountModel.loginError)
                    loginAccountModel.returnPage = '@(Url.Action("index", "routepal"))?route=0';
            }
        });

        $('.toggleDistUnits').click(function () { unitsModel.toggle(); });
        unitsModel.change(function (u) {
            routeModel.distanceUnits(unitsModel.currentUnitsName);
            routeModel.redrawRoute();
            loadMyRoutes(routeModel);
        });
    });

    function getParameterByName(name) { 
      name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]"); 
      var regexS = "[\\?&]" + name + "=([^&#]*)"; 
      var regex = new RegExp(regexS); 
      var results = regex.exec(window.location.search); 
      if (results == null) 
        return ""; 
      else 
        return decodeURIComponent(results[1].replace(/\+/g, " ")); 
    }

    function loadMyRoutes(model, callback) {
        $.post('@Url.Action("myroutes", "routepal")',
            function (result) {
                if (!result.Completed) {
                    return;
                }
                model.myRoutes.removeAll();
                for (var i = 0; i < result.Routes.length; i++)
                    model.myRoutes.push(new MyRouteModel(model, result.Routes[i].Id, result.Routes[i].Name, result.Routes[i].Distance, result.Routes[i].LastRun, result.Routes[i].Notes, result.Routes[i].LastRunBy));

                if (typeof(callback) == 'function') callback();
            }
        );
    }
</script>

<h1>Routes</h1>

<div id="routeManagement">
<div id="routeManagementOptions">
	<h3><a>My Routes</a></h3>
	<div>
    <p data-bind="visible: myRoutes().length == 0">
    You have no saved routes - click the route mapping tab to plot a route, enter a name,
    then click save.
    </p>
    <ul data-bind="template: { foreach: myRoutes }">
        <li>
            <a href="#" data-bind="click: loadRoute, text: routeName, attr: { title: routeNotes }"></a>, <span data-bind="text: distance"></span> <span data-bind="text: distanceUnits"></span>.
            <span data-bind="visible: showLastRun, text: lastRunText"></span>
        </li>
    </ul>
    </div>
    <h3><a>Find a route</a></h3>
    <div>
        <form id="findARoute">
        <div>
            <label for="findRouteName"><strong>Find route:</strong></label>
            <input type="text" id="q" />
            <input id="findRouteGo" type="submit" value="Find..." />
        </div>
        
        <div data-bind="visible: foundRoutes().length == 0 && foundRouteText() == ''">Enter a search term to find a route.</div>
        <div data-bind="visible: foundRoutes().length == 0 && foundRouteText() != '', text: foundRouteText"></div>
        <ul data-bind="template: { foreach: foundRoutes }">
            <li>
                <a href="#" data-bind="click: loadRoute, text: routeName, attr: { title: routeNotes }"></a>, <span data-bind="text: distance"></span> <span data-bind="text: distanceUnits"></span>.
                <span data-bind="visible: showLastRun, text: lastRunText"></span>
            </li>
        </ul>
        </form>
    </div>
	<h3><a>Route Mapping</a></h3>
	<div>
        <div style="position: relative; float: right; z-index: 10; background-color: #efefef; width: 180px; padding: 5px;">
            <button id="routeNew" title="Clear all the points and start a new route">New</button>
            <button id="routeReset" data-bind="visible: routeId() > 0, buttonEnabled: allowSave()" title="Reset the points to the saved routed">Reset</button>
            <button id="routeUndo" data-bind="buttonEnabled: allowUndo()" title="Undo the last point added to the route">Undo</button>
            <button id="routeSave" data-bind="buttonEnabled: allowSave()" title="Save the route">Save</button>
            <button id="routeDelete" data-bind="visible: allowDelete()" title="Delete this route">Delete</button>

            <div><label for="route-name"><strong>Name:</strong> (* required)</label></div>
            <div><input type="text" id="route-name" data-bind="value: routeName, valueUpdate: 'afterkeydown'" /></div>

            <div>
                <strong>Distance:</strong>
                <span data-bind="text: distanceDisplay">0</span> <span data-bind="text: distanceUnits" class="toggleDistUnits" title="Toggle between miles and kilometers">miles</span>
            </div>

            <div><label for="route-notes"><strong>Route Notes:</strong></label></div>
            <div><textarea id="route-notes" rows="4" cols="20" style="width: 150px;" data-bind="value: routeNotes, valueUpdate: 'afterkeydown'"></textarea></div>

            <div>
                <label for="route-public" title="If checked, allows everyone to view this route"><strong>Public Route:</strong></label>
                <input type="checkbox" id="route-public" data-bind="checked: routePublic" title="If checked, allows everyone to view this route" />
            </div>

            <div data-bind="visible: routeDeleted()"><span class="important">Note: </span> This route has been deleted.</div>
        </div>
        <div id="mapDiv" style="position:relative; width:auto; height:100%"></div>
	</div>
</div>
</div>

<p></p>

<div id="loginPromptDialog" title="Please login">
	<p>
    Before you can save the route, you need to login or create an account
    at the <span class="important">top of the page</span>.
    </p>

    <p>
    <strong>First time users: </strong> Don't worry, it will only take a few moments
    and we only ask for your name. Simply use your Google, Twitter, Yahoo, or MyOpenID
    account to login - and you're done! We won't have access to your password or email address.
    </p>
</div>